"""
TechWatchIT - G√©n√©rateur de r√©sum√©s avanc√©s et articles de blog IA
Analyses d√©taill√©es, format blog, et insights approfondis
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from openai import OpenAI
import re
from typing import Dict, List, Optional
import logging
from datetime import datetime
import json

from config.config import Config

class AdvancedSummarizer:
    """G√©n√©rateur de r√©sum√©s avanc√©s et articles de blog bas√© sur GPT-4o"""
    
    def __init__(self):
        self.logger = Config.setup_logging()
        self.openai_client = None
        
        # Initialiser OpenAI
        if Config.OPENAI_API_KEY:
            try:
                self.openai_client = OpenAI(api_key=Config.OPENAI_API_KEY)
                self.logger.info("‚úÖ Client OpenAI avanc√© initialis√©")
            except Exception as e:
                self.logger.error(f"‚ùå Erreur initialisation OpenAI avanc√©: {str(e)}")
                self.openai_client = None
        else:
            self.logger.error("‚ùå Cl√© OpenAI manquante pour r√©sum√©s avanc√©s")
    
    def generate_detailed_analysis(self, article: Dict, classification: Dict = None) -> Dict:
        """
        G√©n√©rer une analyse d√©taill√©e compl√®te avec format blog
        
        Args:
            article: Article √† analyser
            classification: Classification existante
            
        Returns:
            Dict avec analyse compl√®te, format blog, insights techniques
        """
        if not self.openai_client:
            return self._get_fallback_analysis(article)
        
        try:
            # G√©n√©rer l'analyse d√©taill√©e
            detailed_analysis = self._generate_comprehensive_analysis(article, classification)
            
            # G√©n√©rer le format blog
            blog_format = self._generate_blog_article(article, classification, detailed_analysis)
            
            # G√©n√©rer les insights techniques
            technical_insights = self._generate_technical_insights(article, classification)
            
            # G√©n√©rer un r√©sum√© ex√©cutif
            executive_summary = self._generate_executive_summary(article, classification)
            
            result = {
                'detailed_summary': detailed_analysis.get('summary', ''),
                'technical_analysis': detailed_analysis.get('technical_analysis', ''),
                'business_impact': detailed_analysis.get('business_impact', ''),
                'action_plan': detailed_analysis.get('action_plan', ''),
                'risk_assessment': detailed_analysis.get('risk_assessment', ''),
                'blog_article': blog_format,
                'technical_insights': technical_insights,
                'executive_summary': executive_summary,
                'recommendations': detailed_analysis.get('recommendations', []),
                'timeline': detailed_analysis.get('timeline', ''),
                'related_topics': detailed_analysis.get('related_topics', [])
            }
            
            self.logger.info(f"üéØ Analyse d√©taill√©e g√©n√©r√©e pour: {article.get('title', '')[:50]}...")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur analyse d√©taill√©e: {str(e)}")
            return self._get_fallback_analysis(article)
    
    def _generate_comprehensive_analysis(self, article: Dict, classification: Dict = None) -> Dict:
        """G√©n√©rer une analyse technique compl√®te"""
        
        title = article.get('title', '')
        description = article.get('description', '')
        content = article.get('content', '')[:4000]  # Plus de contenu pour l'analyse
        link = article.get('link', '')
        
        # Contexte de classification
        tech_context = ""
        if classification:
            tech_context = f"""
            CONTEXTE TECHNIQUE:
            - Technologie: {classification.get('technology', 'unknown')}
            - Cat√©gorie: {classification.get('category', 'general')}
            - S√©v√©rit√©: {classification.get('severity_level', 'medium')} ({classification.get('severity_score', 'N/A')}/10)
            - Score CVSS: {classification.get('cvss_score', 'N/A')}
            - Alerte s√©curit√©: {'Oui' if classification.get('is_security_alert') else 'Non'}
            """
        
        prompt = f"""
        Tu es un expert senior en cybers√©curit√© et architecte IT avec 15+ ans d'exp√©rience.
        Tu dois analyser cet article de veille technologique et produire une analyse compl√®te et approfondie.
        
        ARTICLE √Ä ANALYSER:
        Titre: {title}
        Description: {description}
        Contenu: {content}
        Source: {link}
        
        {tech_context}
        
        MISSION: Produis une analyse technique compl√®te, d√©taill√©e et actionnable en fran√ßais.
        
        Structure ta r√©ponse EXACTEMENT comme ceci:
        
        R√âSUM√â D√âTAILL√â:
        [R√©sum√© complet en 8-12 phrases, technique mais accessible, expliquant le contexte, les d√©tails techniques, et les implications]
        
        ANALYSE TECHNIQUE:
        [Analyse technique approfondie: comment √ßa fonctionne, quels syst√®mes sont affect√©s, m√©canismes techniques, vecteurs d'attaque, etc. 6-8 phrases]
        
        IMPACT BUSINESS:
        [Impact sur l'entreprise: co√ªts, risques op√©rationnels, conformit√©, r√©putation, continuit√© d'activit√©. 4-6 sentences]
        
        PLAN D'ACTION:
        [Plan d'action d√©taill√© √©tape par √©tape avec priorit√©s et d√©lais. Format liste num√©rot√©e]
        
        √âVALUATION RISQUES:
        [√âvaluation des risques: probabilit√©, impact, exposition, facteurs aggravants. 4-5 sentences]
        
        RECOMMANDATIONS:
        [Liste de 5-7 recommandations sp√©cifiques et actionnables, format liste √† puces]
        
        TIMELINE:
        [Timeline recommand√©e pour la mise en ≈ìuvre: Imm√©diat (0-24h), Court terme (1-7j), Moyen terme (1-4 semaines)]
        
        SUJETS CONNEXES:
        [3-5 sujets ou technologies connexes √† surveiller]
        
        CRIT√àRES QUALIT√â:
        - Sois pr√©cis et technique sans √™tre obscur
        - Donne des exemples concrets quand possible
        - Quantifie les risques et impacts
        - Propose des solutions pratiques et r√©alisables
        - Adapte le niveau de d√©tail √† l'importance du sujet
        """
        
        try:
            response = self.openai_client.chat.completions.create(
                model=Config.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": "Tu es un expert senior en cybers√©curit√© et architecte IT. Tu produis des analyses techniques d√©taill√©es, pr√©cises et actionnables."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=2000,
                temperature=0.1  # Tr√®s coh√©rent et factuel
            )
            
            ai_response = response.choices[0].message.content.strip()
            return self._parse_comprehensive_analysis(ai_response)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur analyse compl√®te: {str(e)}")
            return {}
    
    def _generate_blog_article(self, article: Dict, classification: Dict, analysis: Dict) -> str:
        """G√©n√©rer un article de blog complet"""
        
        title = article.get('title', '')
        content = article.get('content', '')[:3000]
        
        prompt = f"""
        Tu es un r√©dacteur technique sp√©cialis√© en cybers√©curit√© qui √©crit pour un blog IT professionnel.
        
        MISSION: Transforme cette analyse technique en article de blog engageant, informatif et professionnel.
        
        ARTICLE SOURCE:
        Titre: {title}
        Contenu: {content}
        
        ANALYSE TECHNIQUE DISPONIBLE:
        {analysis.get('summary', '')}
        {analysis.get('technical_analysis', '')}
        
        INSTRUCTIONS POUR L'ARTICLE DE BLOG:
        
        1. Cr√©e un titre accrocheur et informatif
        2. Structure l'article avec des sections claires
        3. Utilise un ton professionnel mais accessible
        4. Inclus des exemples pratiques
        5. Termine par des conseils actionnables
        
        FORMAT REQUIS:
        
        # [Titre accrocheur]
        
        ## üö® En Bref
        [R√©sum√© ex√©cutif en 2-3 phrases]
        
        ## üìã Contexte et D√©tails
        [Explication d√©taill√©e du sujet, contexte, enjeux]
        
        ## üîß Aspects Techniques
        [D√©tails techniques accessibles, comment √ßa fonctionne]
        
        ## üíº Impact sur Votre Organisation
        [Implications business, risques, opportunit√©s]
        
        ## ‚úÖ Actions Recommand√©es
        [Liste d'actions concr√®tes avec priorit√©s]
        
        ## üîÆ Perspective et Tendances
        [Vision future, √©volution du sujet, veille √† maintenir]
        
        ---
        *Article g√©n√©r√© par TechWatchIT - Syst√®me de veille automatis√©e*
        
        STYLE:
        - Professionnel mais engageant
        - Phrases courtes et claires
        - Utilise des emojis pour structurer
        - √âvite le jargon excessif
        - Focus sur l'actionnable
        """
        
        try:
            response = self.openai_client.chat.completions.create(
                model=Config.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": "Tu es un r√©dacteur technique expert qui transforme des analyses complexes en articles de blog clairs et engageants."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=1500,
                temperature=0.3  # Un peu plus cr√©atif pour le style
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur g√©n√©ration blog: {str(e)}")
            return self._get_fallback_blog(article)
    
    def _generate_technical_insights(self, article: Dict, classification: Dict) -> Dict:
        """G√©n√©rer des insights techniques sp√©cialis√©s"""
        
        title = article.get('title', '')
        content = article.get('content', '')[:2000]
        
        prompt = f"""
        En tant qu'expert technique, g√©n√®re des insights sp√©cialis√©s sur cet article.
        
        ARTICLE: {title}
        CONTENU: {content}
        
        Produis des insights techniques sous cette structure JSON:
        
        {{
            "key_technologies": ["tech1", "tech2", "tech3"],
            "attack_vectors": ["vecteur1", "vecteur2"],
            "affected_systems": ["syst√®me1", "syst√®me2"],
            "mitigation_strategies": ["strat√©gie1", "strat√©gie2"],
            "detection_methods": ["m√©thode1", "m√©thode2"],
            "compliance_impact": ["norme1", "norme2"],
            "similar_incidents": ["incident1", "incident2"],
            "vendor_response": "r√©ponse du vendeur",
            "community_reaction": "r√©action de la communaut√©"
        }}
        
        R√©ponds UNIQUEMENT avec le JSON valide, sans explication.
        """
        
        try:
            response = self.openai_client.chat.completions.create(
                model=Config.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": "Tu g√©n√®res des insights techniques structur√©s au format JSON."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=800,
                temperature=0.1
            )
            
            json_response = response.choices[0].message.content.strip()
            return json.loads(json_response)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur insights techniques: {str(e)}")
            return {}
    
    def _generate_executive_summary(self, article: Dict, classification: Dict) -> str:
        """G√©n√©rer un r√©sum√© ex√©cutif pour la direction"""
        
        title = article.get('title', '')
        
        prompt = f"""
        R√©dige un r√©sum√© ex√©cutif de 3-4 phrases pour la direction sur: {title}
        
        Focus sur:
        - Impact business
        - Risques financiers/op√©rationnels  
        - Actions requises
        - Timeline critique
        
        Style: Direct, factuel, orient√© d√©cision.
        """
        
        try:
            response = self.openai_client.chat.completions.create(
                model=Config.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": "Tu r√©diges des r√©sum√©s ex√©cutifs pour dirigeants d'entreprise."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=200,
                temperature=0.1
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur r√©sum√© ex√©cutif: {str(e)}")
            return "R√©sum√© ex√©cutif non disponible."
    
    def _parse_comprehensive_analysis(self, ai_response: str) -> Dict:
        """Parser l'analyse compl√®te structur√©e"""
        
        try:
            sections = {
                'summary': self._extract_section(ai_response, 'R√âSUM√â D√âTAILL√â'),
                'technical_analysis': self._extract_section(ai_response, 'ANALYSE TECHNIQUE'),
                'business_impact': self._extract_section(ai_response, 'IMPACT BUSINESS'),
                'action_plan': self._extract_section(ai_response, 'PLAN D\'ACTION'),
                'risk_assessment': self._extract_section(ai_response, '√âVALUATION RISQUES'),
                'recommendations': self._extract_list_section(ai_response, 'RECOMMANDATIONS'),
                'timeline': self._extract_section(ai_response, 'TIMELINE'),
                'related_topics': self._extract_list_section(ai_response, 'SUJETS CONNEXES')
            }
            
            return sections
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur parsing analyse: {str(e)}")
            return {}
    
    def _extract_section(self, text: str, section_name: str) -> str:
        """Extraire une section sp√©cifique du texte"""
        pattern = rf'{section_name}:\s*\n?(.*?)(?=\n?[A-Z√Ä√Ç√Ñ√â√à√ä√ã√è√é√î√ñ√ô√õ√ú≈∏√á\s]+:|$)'
        match = re.search(pattern, text, re.DOTALL | re.IGNORECASE)
        if match:
            return match.group(1).strip()
        return ""
    
    def _extract_list_section(self, text: str, section_name: str) -> List[str]:
        """Extraire une section sous forme de liste"""
        section_text = self._extract_section(text, section_name)
        if not section_text:
            return []
        
        # Extraire les √©l√©ments de liste (‚Ä¢, -, 1., etc.)
        items = re.findall(r'(?:‚Ä¢|\-|\d+\.)\s*([^\n‚Ä¢\-\d]+)', section_text)
        return [item.strip() for item in items if item.strip()]
    
    def _get_fallback_analysis(self, article: Dict) -> Dict:
        """Analyse de fallback si l'IA n'est pas disponible"""
        title = article.get('title', 'Article sans titre')
        
        return {
            'detailed_summary': f"Analyse de: {title}. R√©sum√© d√©taill√© non disponible sans IA.",
            'technical_analysis': "Analyse technique non disponible.",
            'business_impact': "Impact business √† √©valuer manuellement.",
            'action_plan': "Plan d'action √† d√©finir selon votre contexte.",
            'risk_assessment': "√âvaluation des risques √† effectuer.",
            'blog_article': self._get_fallback_blog(article),
            'technical_insights': {},
            'executive_summary': f"Article technique d√©tect√©: {title}. Analyse manuelle requise.",
            'recommendations': ["Analyser manuellement l'article", "Consulter les sources officielles"],
            'timeline': "Timeline √† d√©finir selon la criticit√©.",
            'related_topics': []
        }
    
    def _get_fallback_blog(self, article: Dict) -> str:
        """Article de blog de fallback"""
        title = article.get('title', 'Article Technique')
        
        return f"""# {title}

## üö® En Bref
Article technique d√©tect√© n√©cessitant une analyse manuelle.

## üìã Informations Disponibles
- **Titre**: {title}
- **Source**: {article.get('link', 'Non disponible')}
- **Date**: {article.get('published_date', 'Non disponible')}

## ‚ö†Ô∏è Action Requise
Analyse manuelle recommand√©e pour cet article.

---
*Article g√©n√©r√© par TechWatchIT - Analyse IA non disponible*
""" 